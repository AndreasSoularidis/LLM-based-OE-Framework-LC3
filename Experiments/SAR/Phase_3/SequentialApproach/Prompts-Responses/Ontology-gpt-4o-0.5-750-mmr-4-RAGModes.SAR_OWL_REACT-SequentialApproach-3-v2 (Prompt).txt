
    Create three instances of yourself playing three different roles in the ontology engineering process
    based on the HCOME collaborative ontology engineering methodology. 
    The three roles are the knowledge engineer, the domain expert and the knowledge worker. 
    These three roles work together to create an ontology. The Knowledge Engineer is responsible 
    for the requirements specification, conceptualisation and generation of the ontology. The Domain 
    Expert is an experienced person and provides the requirements for the 
    ontology, terminology, definitions of terms, domain specific explanations of terms and his 
    experience in general. The Knowledge Worker is the user of the ontology 
    and actively participates in the ontology engineering process. The above roles should express 
    their deep knowledge during the conversation. Their aim is to play all three roles, simulating 
    the HCOME methodology. The above mentioned roles will interact with each other, asking and 
    answering questions until a valid and comprehensive ontology is created, which covers all 
    the defined requirements below.
  The aim of the ontology is to model all the necessary concepts and their relationships for Search and Rescue (SAR) missions. The scope of the ontology is wildfire incidents. The generated ontology is the following.
START OF ONTOLOGY
@prefix : <http://example.org/sar#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .

:Incident a owl:Class .
:Wildfire a owl:Class; rdfs:subClassOf :Incident .
:BuildingFire a owl:Class; rdfs:subClassOf :Incident .
:VehicleFire a owl:Class; rdfs:subClassOf :Incident .

:Impact a owl:Class .
:WeatherCondition a owl:Class .
:Temperature a owl:Class; rdfs:subClassOf :WeatherCondition .
:WindSpeed a owl:Class; rdfs:subClassOf :WeatherCondition .
:Humidity a owl:Class; rdfs:subClassOf :WeatherCondition .
:WeatherForecast a owl:Class; rdfs:subClassOf :WeatherCondition .

:SensorData a owl:Class .
:SatelliteData a owl:Class; rdfs:subClassOf :SensorData .
:GroundSensorData a owl:Class; rdfs:subClassOf :SensorData .

:SocialMediaData a owl:Class .
:FirstResponderInput a owl:Class .

:Mission a owl:Class .
:Service a owl:Class .

:AreaBurnt a owl:Class .
:Forest a owl:Class; rdfs:subClassOf :AreaBurnt .
:Swamp a owl:Class; rdfs:subClassOf :AreaBurnt .
:Woodland a owl:Class; rdfs:subClassOf :AreaBurnt .
:CropResidue a owl:Class; rdfs:subClassOf :AreaBurnt .
:Grassland a owl:Class; rdfs:subClassOf :AreaBurnt .

:OtherDisaster a owl:Class .
:Building a owl:Class; rdfs:subClassOf :OtherDisaster .
:Vehicle a owl:Class; rdfs:subClassOf :OtherDisaster .

:Rescue a owl:Class .
:Person a owl:Class; rdfs:subClassOf :Rescue .

:Animal a owl:Class .
:Bird a owl:Class; rdfs:subClassOf :Animal .
:Hive a owl:Class; rdfs:subClassOf :Animal .

:Accident a owl:Class .
:Death a owl:Class; rdfs:subClassOf :Accident .

:PossibleCauseOfFire a owl:Class .
:Physics a owl:Class; rdfs:subClassOf :PossibleCauseOfFire .
:ArsonWithIntent a owl:Class; rdfs:subClassOf :PossibleCauseOfFire .
:ArsonByNegligence a owl:Class; rdfs:subClassOf :PossibleCauseOfFire .

:ForcesInvolved a owl:Class .
:PermanentForce a owl:Class; rdfs:subClassOf :ForcesInvolved .
:SeasonalForce a owl:Class; rdfs:subClassOf :ForcesInvolved .
:VolunteerFirefighter a owl:Class; rdfs:subClassOf :ForcesInvolved .
:ArmedForcePersonnel a owl:Class; rdfs:subClassOf :ForcesInvolved .
:ServicePersonnel a owl:Class; rdfs:subClassOf :ForcesInvolved .
:MunicipalityStaff a owl:Class; rdfs:subClassOf :ForcesInvolved .
:PublicSectorStaff a owl:Class; rdfs:subClassOf :ForcesInvolved .
:ClubMember a owl:Class; rdfs:subClassOf :ForcesInvolved .
:Individual a owl:Class; rdfs:subClassOf :ForcesInvolved .

:InvestmentInstrument a owl:Class .
:FireTruck a owl:Class; rdfs:subClassOf :InvestmentInstrument .
:Tanker a owl:Class; rdfs:subClassOf :InvestmentInstrument .
:FireFightingVehicle a owl:Class; rdfs:subClassOf :InvestmentInstrument .
:Machine a owl:Class; rdfs:subClassOf :InvestmentInstrument .

:AirInvolvement a owl:Class .

:causesFire a owl:ObjectProperty; rdfs:domain :WeatherCondition; rdfs:range :Incident .
:currentMeasurement a owl:DatatypeProperty; rdfs:domain :WeatherCondition; rdfs:range xsd:float .
:forecastMeasurement a owl:DatatypeProperty; rdfs:domain :WeatherCondition; rdfs:range xsd:float .
:location a owl:DatatypeProperty; rdfs:domain :Incident; rdfs:range xsd:string .
:priority a owl:DatatypeProperty; rdfs:domain :Incident; rdfs:range xsd:string .
:urgency a owl:DatatypeProperty; rdfs:domain :Incident; rdfs:range xsd:string .
:sourceData a owl:ObjectProperty; rdfs:domain :Incident; rdfs:range :SensorData .
:creationDate a owl:DatatypeProperty; rdfs:domain :SensorData; rdfs:range xsd:dateTime .
:smokeClassification a owl:DatatypeProperty; rdfs:domain :Incident; rdfs:range xsd:string .
:vulnerableObjects a owl:DatatypeProperty; rdfs:domain :Incident; rdfs:range xsd:string .
:forestryWorkStatus a owl:DatatypeProperty; rdfs:domain :Incident; rdfs:range xsd:string .
:offeredService a owl:ObjectProperty; rdfs:domain :Service; rdfs:range xsd:string .
:mission a owl:ObjectProperty; rdfs:domain :Service; rdfs:range :Mission .
:missionLocation a owl:DatatypeProperty; rdfs:domain :Mission; rdfs:range xsd:string .
:urgentMissionLocation a owl:DatatypeProperty; rdfs:domain :Mission; rdfs:range xsd:string .
:populationDensity a owl:DatatypeProperty; rdfs:domain :Mission; rdfs:range xsd:float .
:peopleLocation a owl:DatatypeProperty; rdfs:domain :Mission; rdfs:range xsd:string .

:hasImpact a owl:ObjectProperty; rdfs:domain :Incident; rdfs:range :Impact .
:hasWeatherCondition a owl:ObjectProperty; rdfs:domain :Incident; rdfs:range :WeatherCondition .
:hasSensorData a owl:ObjectProperty; rdfs:domain :Incident; rdfs:range :SensorData .
:hasSocialMediaData a owl:ObjectProperty; rdfs:domain :Incident; rdfs:range :SocialMediaData .
:hasFirstResponderInput a owl:ObjectProperty; rdfs:domain :Incident; rdfs:range :FirstResponderInput .
:hasMission a owl:ObjectProperty; rdfs:domain :Incident; rdfs:range :Mission .
:hasService a owl:ObjectProperty; rdfs:domain :Incident; rdfs:range :Service .The generated ontology is the following.
 END OF ONTOLOGY
Your goal is to fine-tune the given ontology to make it more robust, expressive and well-structured.
    You should also use the some of the following OWL axioms to make the ontology as expressive as possible. Use ONLY THE ONTOLOGY AXIOMS given in the EXAMPLES and NOT the DATA PRESENTED.
    You do not need to use all of them, but only the necessary axioms to create a WELL CONNECTED and EXPRESSIVE ontology.
    START OF OWL DOCUMENTATION
    
    Turtle Syntax
 <http://example.com/owl/families> owl:imports <http://example.org/otherOntologies/families.owl> .

Turtle Syntax
 :Mary      owl:sameAs              otherOnt:MaryBrown .
 :John      owl:sameAs              otherOnt:JohnBrown .
 :Adult     owl:equivalentClass     otherOnt:Grownup .
 :hasChild  owl:equivalentProperty  otherOnt:child .
 :hasAge    owl:equivalentProperty  otherOnt:age .

Turtle Syntax
 :John    rdf:type owl:NamedIndividual .
 :Person  rdf:type owl:Class .
 :hasWife rdf:type owl:ObjectProperty .
 :hasAge  rdf:type owl:DatatypeProperty .

Turtle Syntax
:John rdf:type :Father .
:Father rdf:type :SocialRole .

owl:targetIndividual   :Susan .

:NarcisticPerson owl:equivalentClass  [
  rdf:type        owl:Restriction ;
  owl:onProperty  :loves ;
  owl:hasSelf     "true"^^xsd:boolean .
] .

:MyBirthdayGuests  owl:equivalentClass  [
  rdf:type   owl:Class ;
  owl:oneOf  ( :Bill  :John  :Mary )
] .
:Orphan  owl:equivalentClass  [
  rdf:type           owl:Restriction ;
  owl:onProperty     [ owl:inverseOf  :hasChild ] ;
  owl:allValuesFrom  :Dead 
] .

owl:qualifiedCardinality  "3"^^xsd:nonNegativeInteger ;
  owl:onProperty            :hasChild ;
  owl:onClass               :Parent
] .
:John  rdf:type  [
  rdf:type         owl:Restriction ;
  owl:cardinality  "5"^^xsd:nonNegativeInteger ;
  owl:onProperty   :hasChild
] . 

    END OF OWL DOCUMENTATION
   The iterative discussion stops when the given ontology becomes well structured (e.g., related classes grouped under related superclasses), 
    its concepts (e.g., classes) are well connected, and the ontology generally has a high level of expressiveness (using OWL axioms).
    Feel free to use domain knowledge to extend the ontology with classes and properties to make it as comprehensive as possible.
    Present the iterative discussion and the generated ontology in Turtle (TTL) format WITHOUT individuals. 
  